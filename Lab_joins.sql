-- 1. List the number of films per category.
SELECT c.name as genre, count(f.title)
FROM sakila.film as f 
JOIN film_category as fc 
ON f.film_id = fc.film_id 
JOIN category as c  
ON fc.category_id = c.category_id 
GROUP BY name;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT store_id, country, city FROM sakila.store as s 
JOIN address as a 
ON s.address_id = a.address_id 
JOIN city as ci 
ON a.city_id = ci.city_id  
JOIN country as co 
ON co.country_id = ci.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT sum(p.amount) as revenue, s.store_id FROM sakila.payment as p
JOIN staff as st
ON st.staff_id = p.staff_id
JOIN store as s
ON s.store_id = st.store_id
group by store_id;


-- 4. Determine the average running time of films for each category.
SELECT AVG(f.length) as average_running_time, c.name  FROM sakila.film as f
JOIN film_category as fc 
ON f.film_id = fc.film_id
JOIN category as c
ON c.category_id = fc.category_id
group by name;

-- 5. Identify the film categories with the longest average running time.
SELECT AVG(f.length) as average_running_time, c.name ,
rank() OVER (ORDER BY AVG(f.length) DESC) as Rank_Ranking
FROM sakila.film as f
JOIN film_category as fc 
ON f.film_id = fc.film_id
JOIN category as c
ON c.category_id = fc.category_id
group by name;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT f.title, count(r.rental_id) as frequency,
rank() OVER (ORDER BY count(r.rental_id) Desc) as Rank_Ranking,
dense_rank() OVER (ORDER BY count(*) DESC) as Dense_Ranking,
row_number() OVER (ORDER BY count(*) DESC) as Row_Ranking 
FROM sakila.film as f 
JOIN inventory as i
ON f.film_id = i.film_id
JOIN rental as r
ON i.inventory_id = r.inventory_id
group by f.title;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT i.store_id, f.title, i.inventory_id,
CASE 
WHEN f.title = "Academy Dinosaur" then "available"
ELSE 'No status'
END AS 'Status Description'
from sakila.inventory as i
JOIN film as f
ON f.film_id = i.film_id;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL.
SELECT i.film_id, f.title, i.inventory_id,
CASE 
WHEN i.inventory_id is null then "Not available"
ELSE 'Available'
END AS 'Status Description'
from sakila.film as f
LEFT JOIN inventory as i
ON i.film_id = f.film_id
WHERE (i.film_id is null and i.inventory_id is null);	

